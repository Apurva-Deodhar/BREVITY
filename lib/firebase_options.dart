// File: lib/firebase_options.dart
// This file is generated by the FlutterFire 
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyBCdTg_6cWfqkTiv4VJuhs3VovUQfpLBdw',
    appId: '1:627461571018:android:c000c9d300277cdeff8f33',
    messagingSenderId: '627461571018',
    projectId: 'news-ai-914981',
    storageBucket: 'news-ai-914981.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyBXQ6RbwCu1RbaeUFmZMzTRKjS5cy6FaMc',
    appId: '1:627461571018:ios:c2bad8239dadcb94ff8f33',
    messagingSenderId: '627461571018',
    projectId: 'news-ai-914981',
    storageBucket: 'news-ai-914981.firebasestorage.app',
    iosBundleId: 'com.unity.brevity',
  );
  static FirebaseOptions get web {
    return FirebaseOptions(
      apiKey: dotenv.env['FIREBASE_WEB_API_KEY']!,
      authDomain: dotenv.env['FIREBASE_WEB_AUTH_DOMAIN'],
      projectId: dotenv.env['FIREBASE_WEB_PROJECT_ID']!,
      storageBucket: dotenv.env['FIREBASE_WEB_STORAGE_BUCKET'],
      messagingSenderId: dotenv.env['FIREBASE_WEB_MESSAGING_SENDER_ID']!,
      appId: dotenv.env['FIREBASE_WEB_APP_ID']!,
      measurementId: dotenv.env['FIREBASE_WEB_MEASUREMENT_ID'],
    );
  }
}